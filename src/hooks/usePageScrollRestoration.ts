import { useEffect } from 'react';
import { useLocation, useNavigationType, NavigationType } from 'react-router-dom';
import simpleHorizontalScroll from '@/lib/simpleHorizontalScroll';

/**
 * Hook para integrar o sistema simples de scroll horizontal com a navega√ß√£o
 * Controla o scroll restoration de forma granular por p√°gina
 */
export const usePageScrollRestoration = () => {
  const location = useLocation();
  const navigationType = useNavigationType();

  useEffect(() => {
    const currentPage = location.pathname + location.search;
    
    // P√°ginas problem√°ticas que devem ter scroll restoration nativo desabilitado
    const problematicPages = ['/busca', '/secao'];
    const isProblematicPage = problematicPages.some(page => location.pathname.startsWith(page));
    
    // Controle granular do scroll restoration nativo
    if ('scrollRestoration' in window.history) {
      if (isProblematicPage) {
        // Desabilita scroll restoration nativo para p√°ginas problem√°ticas
        window.history.scrollRestoration = 'manual';
        console.log(`[PageScrollRestoration] üö´ P√°gina problem√°tica: ${currentPage} - scroll restoration nativo DESABILITADO`);
        
        // Para p√°ginas problem√°ticas, for√ßa scroll para o topo
        if (navigationType === NavigationType.Pop) {
          // Pequeno delay para garantir que a p√°gina carregou
          setTimeout(() => {
            window.scrollTo({ top: 0, behavior: 'instant' });
            console.log(`[PageScrollRestoration] ‚¨ÜÔ∏è For√ßou scroll para o topo: ${currentPage}`);
          }, 100);
        }
        
        // N√£o executa sistema horizontal para p√°ginas problem√°ticas
        return;
      } else {
        // Habilita scroll restoration nativo para p√°ginas normais
        window.history.scrollRestoration = 'auto';
        console.log(`[PageScrollRestoration] ‚úÖ P√°gina normal: ${currentPage} - scroll restoration nativo HABILITADO`);
      }
    }
    
    // Define p√°gina atual no sistema horizontal (apenas para p√°ginas normais)
    simpleHorizontalScroll.setCurrentPage(currentPage);
    
    // Se for navega√ß√£o POP (voltar), restaura posi√ß√µes horizontais ap√≥s delay
    if (navigationType === NavigationType.Pop) {
      console.log(`[PageScrollRestoration] üîÑ Voltando para p√°gina normal: ${currentPage}`);
      
      // Aguarda elementos carregarem e restaura posi√ß√µes horizontais
      setTimeout(() => {
        simpleHorizontalScroll.restoreAllPositions();
      }, 300);
    } else {
      console.log(`[PageScrollRestoration] ‚û°Ô∏è Nova navega√ß√£o para p√°gina normal: ${currentPage}`);
    }
  }, [location.pathname, location.search, navigationType]);
};

